name: CI
on:
  push:
    branches:
      - next
  pull_request:
    branches:
      - next

jobs:
  build-windows:
    runs-on: windows-2019
    strategy:
      matrix:
        configuration: [ Debug, Release ]
        platform: [ x86, x64 ]
    steps:
      - uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build
        run: msbuild ui/applets/win32/src/Applet.sln -t:Rebuild -p:Configuration=${{ matrix.configuration }} -p:Platform=${{ matrix.platform }}

      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: applet
          path: |
            ui/applets/win32/src/x64/Release/workrave-applet64.dll
            ui/applets/win32/src/Release/workrave-applet.dll
            ui/applets/win32/src/x64/Debug/workrave-applet64.dll
            ui/applets/win32/src/Debug/workrave-applet.dll

  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        config:
          - image: ubuntu-focal
            os: ubuntu-latest
            compiler: gcc
            ui: Gtk+3
            enable: INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE
            disable: TESTS,COVERAGE,TRACING
  
          - image: ubuntu-focal
            os: ubuntu-latest
            compiler: gcc
            ui: Gtk+3
            enable: INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE,TRACING
            disable: TESTS,COVERAGE
  
          - image: ubuntu-focal
            os: ubuntu-latest
            compiler: gcc
            ui: Qt5
            enable: INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE,TRACING
            disable: TESTS,COVERAGE

          - image: ubuntu-groovy
            os: ubuntu-latest
            compiler: gcc
            ui: Gtk+3
            enable: INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE
            disable: TESTS,COVERAGE,TRACING
    
          - image: ubuntu-groovy
            os: ubuntu-latest
            compiler: gcc
            ui: Qt5
            enable: INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE,TRACING
            disable: TESTS,COVERAGE

          - image: mingw-gtk-rawhide
            os: ubuntu-latest
            compiler: clang
            ui: Gtk+3
            configuration: Release
            enable: 
            disable: INDICATOR,GSTREAMER,PULSE,GNOME_CLASSIC_PANEL,TESTS,COVERAGE,TRACING
            upload: true
  
          - image: mingw-gtk-rawhide
            os: ubuntu-latest
            compiler: clang
            ui: Gtk+3
            configuration: Debug
            enable: TRACING
            disable: INDICATOR,GSTREAMER,PULSE,GNOME_CLASSIC_PANEL,TESTS,COVERAGE
            upload: true
  
          - os: macos-latest
            compiler: clang
            ui: Qt5
            enable: 
            disable: INDICATOR,GSTREAMER,PULSE,GNOME_CLASSIC_PANEL,TESTS,COVERAGE,TRACING
  
    steps:
      - name: Prepare
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
          elif [[ $GITHUB_REF == refs/heads/next ]]; then
            echo ::set-output name=version::latest
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            echo ::set-output name=version::${GITHUB_REF#refs/heads/}
          else
            echo ::set-output name=version::dev
          fi
        
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup build env
        if: matrix.config.os == 'macos-latest'
        run: |
          brew install gettext qt5 python3 boost
          brew link gettext --force
          brew outdated cmake || brew upgrade cmake
          pip3 install --user Jinja2==2.8 # required for dbus support, system (distro) wide include paths are ignored

      - name: Build
        run: |
            if [[ $DOCKER_IMAGE ]]; then
               IFS=$'\n'
               export WORKRAVE_ENV=github-docker
               docker run --rm \
                   -v $GITHUB_WORKSPACE:/workspace/source \
                   `printenv | grep -E '^(CONF_.*|GITHUB_.*|DOCKER_IMAGE|WORKRAVE_.*)=' | sed  -e 's/^/-e/g' ` \
                   rcaelers/workrave-build:${DOCKER_IMAGE} \
                   sh -c "/workspace/source/build/ci/build.sh"
            else
              export WORKRAVE_ENV=github
              $GITHUB_WORKSPACE/build/ci/build.sh
            fi
        env:
           WORKRAVE_TAG: ${{ env.GITHUB_TAG }}
           WORKRAVE_JOB_INDEX: ${{ strategy.job-index }}
           CONF_COMPILER: ${{ matrix.config.compiler }}
           CONF_UI: ${{ matrix.config.ui }}
           CONF_ENABLE: ${{ matrix.config.enable }}
           CONF_DISABLE: ${{ matrix.config.disable }}
           CONF_CONFIGURATION: ${{ matrix.config.configuration }}
           DOCKER_IMAGE: ${{ matrix.config.image }}

      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v2
        if: ${{ matrix.config.upload }}
        with:
          name: binaries
          path: _deploy

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: binaries
          path: _deploy

      - name: Upload artifacts to MinIO
        run: | 
          aws configure set aws_access_key_id travis
          aws configure set aws_secret_access_key $SNAPSHOTS_SECRET_ACCESS_KEY
          aws configure set default.region us-east-1
          aws configure set default.s3.signature_version s3v4
          aws configure set s3.endpoint_url https://snapshots.workrave.org/
          aws s3 --endpoint-url https://snapshots.workrave.org/ cp --recursive _deploy s3://snapshots/next
        env:
           WORKSPACE: ${{ github.workspace }}
           SNAPSHOTS_SECRET_ACCESS_KEY: ${{ secrets.SNAPSHOTS_SECRET_ACCESS_KEY }}

      - name: Create artifact catalog
        run: |
          cd $GITHUB_WORKSPACE/build/catalog
          npm i
          node --experimental-modules main.js
        env:
           WORKSPACE: ${{ github.workspace }}
           SNAPSHOTS_SECRET_ACCESS_KEY: ${{ secrets.SNAPSHOTS_SECRET_ACCESS_KEY }}

  website:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [ deploy ]
    steps:
      - name: Trigger workrave.org rebuild
        run: |
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.TOKEN }}" \
            -H 'Accept: application/vnd.github.everest-preview+json' \
            -d '{"event_type":"rebuild"}' \
            https://api.github.com/repos/rcaelers/workrave-website/dispatches
