sudo: required
dist: trusty

services:
  - docker

notifications:
  email:
    on_success: change
    on_failure: change

################################################################################

stage_generic: &stage_generic
  before_deploy:
    - if [[ -a .git/shallow ]]; then git fetch --unshallow; fi
    - GIT_TAG=`git describe --tags`
    - BUILD_DATE=`date +"%Y%m%d"`

stage_generic_build: &stage_generic_build
  <<: *stage_generic
  script: |
    if [[ $DOCKER_IMAGE ]]; then
      docker run --rm \
          -v "$TRAVIS_BUILD_DIR:/workspace/source" \
          $(printenv | grep -E '^(COMPILER|CONF_ENABLE|CONF_DISABLE||CONF_FLAGS|CONF_GTK_VER|CONFIGURATION|DOCKER_IMAGE|TRAVIS_BUILD_DIR|TRAVIS_TAG|DISTCHECK)=' | sed 's/^/-e /g') \
          rcaelers/workrave-build:${DOCKER_IMAGE} \
          sh -c "/workspace/source/build/travis/build.sh"
    else
       build/travis/build.sh
    fi

stage_github: &stage_github
  <<: *stage_generic
  os: linux
  dist: trusty
  language: cpp
  before_install:
    |
    if [ ${TRAVIS_OS_NAME} = "linux" ]; then
      pushd /tmp
      curl -OL https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2
      tar xvfj linux-amd64-github-release.tar.bz2
      mkdir -p ~/bin/
      mv bin/linux/amd64/github-release ~/bin/
      chmod +x ~/bin/github-release
      popd
    fi

stage_linux: &stage_linux
  <<: *stage_generic_build
  os: linux
  dist: trusty
  language: cpp

stage_win32: &stage_win32
  <<: *stage_linux

stage_deploy: &stage_deploy
  <<: *stage_linux
  <<: *stage_github
  deploy:
    - provider: script
      skip_cleanup: true
      on:
        repo: rcaelers/workrave
        branch: branch_v1_10
        tags: true
        condition: $TRAVIS_TAG =~ ^v1_.*$
      script: build/travis/deploy-upload.sh

    - provider: s3
      skip_cleanup: true
      local_dir: _deploy
      upload_dir: "snapshots/v1.10/$BUILD_DATE-$GIT_TAG"
      acl: public_read
      bucket: org-workrave
      access_key_id: "$AWS_ACCESS_KEY_ID"
      secret_access_key: "$AWS_SECRET_ACCESS_KEY"
      region: eu-central-1
      on:
        repo: rcaelers/workrave
        branch: branch_v1_10
  
    - provider: s3
      skip_cleanup: true
      local_dir: _deploy
      upload_dir: "snapshots/v1.10/$BUILD_DATE-$GIT_TAG"
      acl: public_read
      bucket: org-workrave
      access_key_id: "$AWS_ACCESS_KEY_ID"
      secret_access_key: "$AWS_SECRET_ACCESS_KEY"
      region: eu-central-1
      on:
        repo: rcaelers/workrave
        tags: true

stage_osx: &stage_osx
  <<: *stage_generic_build
  os: osx
  osx_image: xcode9.4
  language: cpp
  before_install:
    |
    if [ ${TRAVIS_OS_NAME} = "osx" ]; then
      # compilation with system wide gettext fails at the link stage with missing symbols...
      brew install gettext qt5 python3
      brew link gettext --force
      brew linkapps qt5
      brew outdated cmake || brew upgrade cmake
      
      pip3 install --user Jinja2==2.8 # required for dbus support, system (distro) wide include paths are ignored
    fi

stage_ppa: &stage_ppa
  <<: *stage_generic
  os: linux
  dist: trusty
  language: cpp
  script: |
    if [[ $DOCKER_IMAGE ]]; then
      docker run --rm \
          -v "$TRAVIS_BUILD_DIR:/workspace/source" \
          -e TRAVIS_TAG=${TRAVIS_TAG} \
          rcaelers/workrave-build:${DOCKER_IMAGE} \
          sh -c "/workspace/source/build/travis/ppa.sh"
    else
       build/travis/ppa.sh
    fi

jobs:
  include:
    - stage: prepare
      script: |
        VERSION=`echo $TRAVIS_TAG | sed -e 's/_/./g'` \
        github-release release \
          --user "${TRAVIS_REPO_SLUG%%/[^/]*}" \
          --repo "${TRAVIS_REPO_SLUG#[^/]*/}" \
          --tag "$TRAVIS_TAG" \
          --name "Workrave $VERSION" \
          --description "New release" \
          --draft
      <<: *stage_generic
      <<: *stage_github

    ###########################################################################
    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-xenial"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-bionic"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-cosmic"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-disco"
      <<: *stage_linux
      <<: *stage_deploy

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,gsettings,xml,pulse,indicator,xfce,mate,dbus,distribution,experimental,gconf,gstreamer,exercises"
        CONF_DISABLE=""
        DOCKER_IMAGE="ubuntu-eoan"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        DOCKER_IMAGE="ubuntu-disco"
        CONF_GTK_VER="2"
        CONF_ENABLE="gsettings,,exercises,xml,gconf,distribution,experimental"
        CONF_DISABLE="pulse,xfce,gnome3,gstreamer,dbus,mate,indicator"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        CONF_GTK_VER="3"
        CONF_ENABLE="gnome3,pulse,dbus,experimental,gstreamer,exercises,xml"
        CONF_DISABLE="gsettings,gconf,indicator,xfce,mate,debug,distribution,tests,tracing"
        DOCKER_IMAGE="ubuntu-disco"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        CONFIGURATION="Release"
        DOCKER_IMAGE="mingw-gtk2"
      <<: *stage_win32
      <<: *stage_deploy

    - stage: build
      env: >
        COMPILER="gcc"
        CONFIGURATION="Debug"
        DOCKER_IMAGE="mingw-gtk2"
      <<: *stage_win32
      <<: *stage_deploy

    - stage: release
      script:
        - |
          VERSION=`echo $TRAVIS_TAG | sed -e 's/_/./g'` \
          github-release edit \
          --user "${TRAVIS_REPO_SLUG%%/[^/]*}" \
          --repo "${TRAVIS_REPO_SLUG#[^/]*/}" \
          --tag "$TRAVIS_TAG" \
          --name "Workrave $VERSION" \
          --description "New release"
      <<: *stage_generic
      <<: *stage_github

    - stage: ppa
      env: >
        DOCKER_IMAGE="ubuntu-bionic"
      before_install:
        - mkdir -p _dist/secrets
        - chmod 0700 _dist/secrets
        - openssl aes-256-cbc -K $encrypted_cc78bd3121e0_key -iv $encrypted_cc78bd3121e0_iv -in build/travis/secrets.tar.enc -out _dist/secrets/secrets.tar -d
        - tar xf _dist/secrets/secrets.tar -C _dist/
        - rm -f _dist/secrets/secrets.tar
        - echo $GPG_PASSPHRASE > _dist/secrets/priv-key
      <<: *stage_ppa

# TODO; fails before github-release is not installed
after_failure:
  - |
    github-release delete \
    --user "${TRAVIS_REPO_SLUG%%/[^/]*}" \
    --repo "${TRAVIS_REPO_SLUG#[^/]*/}" \
    --tag "$TRAVIS_TAG"

stages:
    - name: prepare
      if: tag IS present AND tag =~ ^v1_.*$ AND type = push
    - name: build
      if: (tag IS NOT present) OR (tag != ppa)
    - name: release
      if: tag IS present AND tag =~ ^v1_.*$ AND type = push
    - name: ppa
      if: tag IS present AND (tag =~ ^v1_.*$ OR tag = ppa) AND type = push
